Vcard maker API. Partially motivated by:

  http://rpa-base.rubyforge.org/wiki/wiki.cgi?GoodAPIDesign

  See "Many arguments? Lose 'em"

Partially motivated by ruby1.8's rss/maker API:

  rss = RSS::Maker.make("0.9") do |maker|
    maker.channel.title = "title"
    maker.channel.link = "link"
    maker.channel.description = "description"
    maker.channel.language = "language"

    maker.image.url = "maker.image.url"
    maker.image.title = "maker.image.title"

    item = maker.items.new_item
    item.title = "item title"
    item.link =  "link"
  end

  puts rss.to_s

And partly by discussion with Dane G. Avilla.


** Goals

Something I don't like about rss/maker is it returns nil if a mandatory
field was not set... very difficult to use.

I like it to be hard to do things wrong, this can lead to APIs with lots of
mandatory args:

  #add_name(family, given, additional, prefix, suffix)

But this sucks because I can never remember the order, and not all of the
fields are mandatory anyhow...

So, given these desires, here's a sketch of an API for vCard creation.

One thing I try to address is that often the attributes associated with a vCard
field are all implemented by adding something to the 'type' parameter, even
though the stuff getting jammed in there is (arguably) logically different.

  ADR;type=preferred,work,parcel:...

Most people would think of this as being better modelled by:

  ADR;location=work;delivery=parcel;preferred=true:...

I try and present things this way in the API, letting the underlying
representation be an implementation detail.


** Questions:

Q: Does Apple support PHOTO and LOGO in OS 10.3?


Q: Apple AB 3.0.3 doesn't do round-trip.. so any field it doesn't "get" is dumped into the NOTE field,
  and comes out that way. Play with this, what about PHOTO and KEY and PRODID?


Q: big problem with this kind of 'maker" API is it doesn't deal with adding new
fields to an existing vCard. Or modifying fields. Maybe it needs an alternate constructor,
one which takes a Vcard object, and will allow modifying that object? Would need a "delete_field"
method, too, then.


Q: find X.500, and it's telephone number format!


Q: how to set value and encoding...
 If it is supposed to be TEXT, escape it?
 If it is allowed to be binary, encode it?

value says "this is a date/uri/date-time/text/etc." encoding says this
is base-64 encoded, or quoted-printable, etc.

Especially it's hard to tell the difference between TEXT (where , and ; should
be escaped) and more structured fields, and particularly URIs. They are all String...


Q: Which fields can occur multiple times? N, for example? Does it say, anywhere?

** Design/Use Cases


Here's how I'd like it to work. This was developed while reading through and
describing the fields that the RFC specifies for vCards, and trying to map them
to useful APIs.

# Only FN and N are mandatory in a vCard (well, except for BEGIN, END and VERSION).
card = Maker.make(full_name) do |maker|
  # FN: TEXT
  # - mandatory, only one, set to +full_name+

  # N: Family Name; Given Name; Additional Names; Honorific Prefixes; Honorific Suffixes
  #  - field is mandatory, so raise error if not set
  #  - all components are optional, can be N:;;;;
  #  - all compoenents can be set multiple times (.suffixes = RN,BFA)
  #  - block is mandatory, so you can't not notice it takes a block, but you can not
  #    set any name component, that is allowed
  #  - Maker.make will raise an error if name is not added.
  maker.add_name do |name|
    name.family = String
    name.given = String
    name.additional = String
    name.prefix  = String
    name.suffix  = String
  end


  # NICKNAME: TEXT, ...
  #  - multiple components allowed
  #  - allow it to be set multiple times, each one is concatenated to the
  #    same field
  #  - allow an Array of String?
  maker.nickname = String


  # PHOTO - can be of two varieties:
  #   uri   ->  PHOTO;value=uri[,type=IANA]:URI
  #   image ->  PHOTO;encoding=b[,type=IANA]:DATA
  # - IANA is a "IANA registered image formats or a non-standard image
  #   format"
  # - types is never required. I think its pretty important for inline binary. For
  #   a URI, I guess it could be implied by the Content-Type, for HTTP URIs,
  #   anyhow.
  # - technically, if a photos format was just text, it doesn't have to be
  #   base-64 encoded, but I think I should always encode it

  # You are allowed to put in nil yourself, but you have to actively choose not
  # to have the type specified.
  maker.add_photo_image(data, type) do |photo|
    # or
  maker.add_photo_link(uri, type = nil) do |photo|
    photo.type = ...
  end


  # BDAY: DATE
  #  Can also be DATE-TIME, but the value is supposed to be changed...
  # - should only be one!
  maker.birthday = Date
  maker.birthday = DateTime
  maker.birthday = Time


  # ADR:post office box;extended address; street address; locality; region; postal-code; country
  #  - can have multiple
  #  - common values of type param are, by related function:
  #           location: home, work
  #           delivery: postal, parcel
  #           delivery: dom (domestic), intl (international)
  #           preferred: true/false
  #  - components are allowed to have multiple values, region could be "shiga zone, hakumatsu region"
  #  - apple note: it is using '\n' in it's street address, but you are allowed to use ',', what's going on?
  #  - should it take 'steet address' as an arg, the common case, or maybe even stree, city, province?
  make.add_addr do |adr|
    adr.location = 'home'
    adr.location = 'work'
    adr.location = [ 'home', 'work' ]
    adr.work = true
    adr.home = true

    adr.preferred = true # false

    adr.delivery = parcel
  end

  # LABEL:TEXT
  #  - this is like ADR, in the sense that FN is like N. It's a preformatted with '\n' address label, I
  #    guess that usually it can be put together from ADR.
  #  - I suspect it was added for apps that are importing addresses from some other format, and they have
  #    the address text, but can't break it down into all the parts that ADR needs, so this is their back-door.
  #  - it takes all the type params that ADR does
  #  - maybe it should be a sub-thing of ADR? And if both .label is assigned
  #  and anything else both LABEL and ADR will be generated, with the same type
  #  field? Maybe even in a group....? Or is that getting a bit much...
  
  make.add_addr do |adr|
    adr.label = "30 Here\na street\na town"
    # ...
  end


  # TEL:phone-number
  #   - spec says its supposed to be in a canonica form, as described by X.500 Telephone Number,
  #     but doesn't say what that form is!
  #   - attributes, trying to organize them...
  #       location: home, work, msg, cell, car, pager
  #           are these all locations? msg is arguably a capability, for home numbers anyhow,
  #             but doctors, for eg, sometimes have a special number to call to leave messages
  #             in case of emergencies
  #       capability: voice,fax,video,bbs,modem,isdn,pcs
  make.add_tel do |tel|
    tel.location = ...
    tel.capability = ...
    tel.preferred = ...
  end

  # EMAIL:TEXT
  #  - attributes:
  #     protocol: internet, x400  (I guess this could also be uucp, fido, etc.)
  #         spec says default is internet, so doesn't have to be specified unless
  #         its NOT internet
  #     preferred: 
  #

  # MAILER:TEXT
  # TZ:
  # GEO:
  # TITLE:
  # ROLE:
  # LOGO: - this is like PHOTO, but is for the card, it's kind of cool, does Apple support it in 10.3?
  # AGENT
  # ORG
  # CATEGORY: - this could have all of Apples's "groups", but does it? Arguably it would be a personal
  #   info leak.
  # NOTE: apple supports this
  # PRODID: - I'm putting this in iCaledars, maybe I should put it in vCards, too?
  # REV, SORT-STRING, SOUND, UID, CLASS, KEY
  # URL:URL


end


